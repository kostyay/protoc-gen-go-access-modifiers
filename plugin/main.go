package main

import (
	"fmt"
	pb "github.com/kostyay/protoc-gen-go-access-modifiers/pkg/access/v1"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"log"
	"os"
)

func initLog() (*os.File, error) {
	f, err := os.OpenFile("protoc-gen-go-access-modifiers.log", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	if err != nil {
		return nil, fmt.Errorf("error opening file: %v", err)
	}

	log.SetOutput(f)
	return f, nil
}

func main() {
	f, err := initLog()
	if err != nil {
		log.Fatalf("Failed to initialize log: %v", err)
	}

	defer f.Close()

	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, file := range gen.Files {
			if !file.Generate {
				continue
			}
			generateFile(gen, file)
		}
		return nil
	})
}

// generateFile generates a _ascii.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_public.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-access-modifiers. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P(`import "github.com/kostyay/protoc-gen-go-access-modifiers/pkg/types"`)
	g.P()

	for _, message := range file.Messages {
		generateMessage(g, message)
	}

}

func generateMessage(g *protogen.GeneratedFile, msg *protogen.Message) {
	log.Printf("Processing message: %s", msg.Desc.Name())
	g.P("func (x *", msg.GoIdent, ") AsPublic() {")
	firstField := false
	for _, field := range msg.Fields {
		if privateOption := getPrivateOption(field); privateOption != nil {
			if !firstField {
				g.P("var emptyField *", msg.GoIdent)
				firstField = true
			}
			g.P(fmt.Sprintf("x.%s = emptyField.Get%s()", field.GoName, field.GoName))
		}

		if field.Desc.Kind() == protoreflect.MessageKind {
			g.P(fmt.Sprintf("if p, ok := interface{}(x.Get%s()).(types.AsPublic); ok {", field.GoName))
			g.P("p.AsPublic()")
			g.P("}")
		}

	}
	g.P("}")

}

func getPrivateOption(field *protogen.Field) *pb.FieldOption {
	log.Printf("Processing field: %s", field.Desc.Name())

	var fo *pb.FieldOption

	field.Desc.Options().ProtoReflect().Range(func(desc protoreflect.FieldDescriptor, value protoreflect.Value) bool {
		if !desc.IsExtension() {
			return true
		}

		if desc.Number() != pb.E_Fo.TypeDescriptor().Number() {
			return false
		}

		var ok bool
		fo, ok = value.Message().Interface().(*pb.FieldOption)
		if !ok {
			log.Printf("Failed to cast to FieldOption: %v", value.Message().Interface())
			return false
		}
		return true
	})

	return fo
}
